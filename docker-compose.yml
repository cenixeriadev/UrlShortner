services:
  backend:
    build:
      context: ./backend 
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8081:8081"
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - ZOOKEEPER_HOST=zookeeper
      - DB_HOST=pg
      - DB_NAME=urlshort
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_DATASOURCE_URL=jdbc:postgresql://pg:5432/urlshort
      - JAVA_OPTS=-Xmx2g -Xms1g -Xss1m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport
    deploy:
      resources:
        limits:
          memory: 3g
          cpus: '2.0'
        reservations:
          memory: 1g
          cpus: '1.0'
    networks:
      - backend_network
    depends_on:
      pg:
        condition: service_healthy
      redis:
        condition: service_started
      zookeeper:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  pg:
    image: postgres:16
    container_name: pg
    env_file:
      - .env
    environment:
      POSTGRES_DB: urlshort
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - backend_network
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/db:/docker-entrypoint-initdb.d
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d urlshort"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - backend_network
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: zookeeper:3.9
    container_name: zookeeper
    ports:
      - "2182:2182"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
    networks:
      - backend_network
    healthcheck:
      test: [ "CMD-SHELL", "zkServer.sh status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - zkdata:/data
      - zkdatalog:/datalog
    restart: always

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/angular.json:/app/angular.json
      - ./frontend/package.json:/app/package.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
    networks:
      - frontend_network
      - backend_network
    depends_on:
      - backend
    environment:
      - NODE_ENV=development
    command: npm start

volumes:
  pgdata:
  zkdata:
  zkdatalog:

networks:
  backend_network:
    driver: bridge
    internal: false # Permite comunicaci√≥n con frontend
  frontend_network:
    driver: bridge